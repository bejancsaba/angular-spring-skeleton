buildscript {
	ext.springBootVersion = '2.3.3.RELEASE'

	repositories {
		//jcenter()
		maven { url 'https://repo.spring.io/plugins-release' }
		maven { url 'https://plugins.gradle.org/m2/' }
		//maven { url 'http://jcenter.bintray.com' }
	}
	dependencies {
		classpath("com.github.node-gradle:gradle-node-plugin:3.0.0-rc2")
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
	}
}

plugins {
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'jacoco'
}

apply from: 'gradle/codequality.gradle'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	//implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	//implementation 'io.springfox:springfox-swagger-ui:2.9.2'

	annotationProcessor 'org.projectlombok:lombok'

	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.2'
	testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
	testImplementation 'org.mockito:mockito-junit-jupiter:3.2.4'
	testImplementation 'org.assertj:assertj-core'

	implementation 'org.projectlombok:lombok'

	runtime 'com.h2database:h2'

	//compile 'org.slf4j:slf4j-log4j12'
	compileOnly 'org.codehaus.groovy:groovy:3.0.4:indy'
}

apply plugin: 'jacoco'

jacoco {
	toolVersion = '0.8.2'
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		html.enabled true
		html.destination file("$buildDir/reports/jacoco")
	}
}
test.finalizedBy jacocoTestReport

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['**/demo/dao/**',
							  '**/demo/config/**',
							  '**/demo/domain/**',
							  '**/demo/controller/**',
							  '**/demo/DemoApplication.class']
			)
		}))
	}

	violationRules {
		rule {
			limit {
				minimum = 0.80
			}
		}
	}
}
check.dependsOn jacocoTestCoverageVerification

def webuiBuildOutput = "${project(':web-ui').projectDir}/dist"

processResources {
	dependsOn ':web-ui:assemble'

	doLast {
		copy {
			from webuiBuildOutput
			into "$sourceSets.main.output.resourcesDir/static"
		}
	}
}